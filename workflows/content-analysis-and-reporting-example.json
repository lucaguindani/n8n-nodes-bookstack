{
  "name": "Bookstack Content Analysis and Reporting",
  "nodes": [
    {
      "parameters": {
        "resource": "book",
        "operation": "getAll"
      },
      "name": "Get All Books",
      "type": "bookstack",
      "typeVersion": 1,
      "position": [300, 200]
    },
    {
      "parameters": {
        "resource": "page",
        "operation": "getAll"
      },
      "name": "Get All Pages",
      "type": "bookstack",
      "typeVersion": 1,
      "position": [300, 400]
    },
    {
      "parameters": {
        "resource": "chapter",
        "operation": "getAll"
      },
      "name": "Get All Chapters",
      "type": "bookstack",
      "typeVersion": 1,
      "position": [300, 300]
    },
    {
      "parameters": {
        "jsCode": "// Analyze content statistics\nconst books = $('Get All Books').all();\nconst chapters = $('Get All Chapters').all();\nconst pages = $('Get All Pages').all();\n\n// Count statistics\nconst stats = {\n  total_books: books.length,\n  total_chapters: chapters.length,\n  total_pages: pages.length,\n  books_with_most_pages: [],\n  most_common_tags: {},\n  content_by_month: {},\n  average_page_length: 0\n};\n\n// Find books with most pages\nconst bookPageCounts = {};\npages.forEach(page => {\n  const bookId = page.json.book_id;\n  if (bookId) {\n    bookPageCounts[bookId] = (bookPageCounts[bookId] || 0) + 1;\n  }\n});\n\nstats.books_with_most_pages = Object.entries(bookPageCounts)\n  .sort(([,a], [,b]) => b - a)\n  .slice(0, 5)\n  .map(([bookId, count]) => {\n    const book = books.find(b => b.json.id == bookId);\n    return {\n      book_name: book?.json.name || 'Unknown',\n      book_id: bookId,\n      page_count: count\n    };\n  });\n\n// Add timestamp\nstats.analysis_date = new Date().toISOString();\n\nreturn [{ json: stats }];"
      },
      "name": "Analyze Content Statistics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 300]
    },
    {
      "parameters": {
        "resource": "global",
        "operation": "search",
        "query": "TODO OR FIXME OR INCOMPLETE",
        "returnAll": true
      },
      "name": "Find Incomplete Content",
      "type": "bookstack",
      "typeVersion": 1,
      "position": [300, 500]
    },
    {
      "parameters": {
        "jsCode": "// Generate comprehensive report\nconst stats = $('Analyze Content Statistics').first().json;\nconst incompleteContent = $('Find Incomplete Content').all();\n\n// Create HTML report\nconst reportHtml = `\n<h1>BookStack Content Analysis Report</h1>\n<p><strong>Generated:</strong> ${new Date(stats.analysis_date).toLocaleString()}</p>\n\n<h2>üìä Overall Statistics</h2>\n<ul>\n  <li><strong>Total Books:</strong> ${stats.total_books}</li>\n  <li><strong>Total Chapters:</strong> ${stats.total_chapters}</li>\n  <li><strong>Total Pages:</strong> ${stats.total_pages}</li>\n</ul>\n\n<h2>üìö Most Active Books</h2>\n<ul>\n  ${stats.books_with_most_pages.map(book => \n    `<li><strong>${book.book_name}:</strong> ${book.page_count} pages</li>`\n  ).join('')}\n</ul>\n\n<h2>‚ö†Ô∏è Incomplete Content</h2>\n<p>Found ${incompleteContent.length} items marked as incomplete.</p>\n\n<hr>\n<p><em>Report generated automatically by n8n workflow</em></p>\n`;\n\nconst report = {\n  title: `BookStack Analysis Report - ${new Date().toISOString().split('T')[0]}`,\n  html: reportHtml,\n  stats: stats,\n  incomplete_count: incompleteContent.length,\n  generated_at: new Date().toISOString()\n};\n\nreturn [{ json: report }];"
      },
      "name": "Generate Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [800, 400]
    },
    {
      "parameters": {
        "resource": "page",
        "operation": "create",
        "book_id": "1",
        "name": "={{ $json.title }}",
        "html": "={{ $json.html }}",
        "tags": "report,analysis,automation,statistics"
      },
      "name": "Create Report Page",
      "type": "bookstack",
      "typeVersion": 1,
      "position": [1000, 400]
    },
    {
      "parameters": {
        "operation": "create",
        "fileName": "bookstack-analysis-{{ $today() }}.json",
        "fileContent": "={{ JSON.stringify($json, null, 2) }}",
        "options": {}
      },
      "name": "Export Report Data",
      "type": "n8n-nodes-base.writeFile",
      "typeVersion": 1,
      "position": [1200, 400]
    }
  ],
  "connections": {
    "Get All Books": {
      "main": [
        [
          {
            "node": "Analyze Content Statistics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Chapters": {
      "main": [
        [
          {
            "node": "Analyze Content Statistics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Pages": {
      "main": [
        [
          {
            "node": "Analyze Content Statistics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Content Statistics": {
      "main": [
        [
          {
            "node": "Generate Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Incomplete Content": {
      "main": [
        [
          {
            "node": "Generate Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Report": {
      "main": [
        [
          {
            "node": "Create Report Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Report Page": {
      "main": [
        [
          {
            "node": "Export Report Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}