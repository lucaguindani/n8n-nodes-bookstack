{
  "name": "Bookstack Migration and Synchronization",
  "nodes": [
    {
      "parameters": {
        "resource": "global",
        "operation": "search",
        "query": "tag:migrate",
        "returnAll": true
      },
      "name": "Find Content to Migrate",
      "type": "bookstack",
      "typeVersion": 1,
      "position": [300, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true
          },
          "conditions": [
            {
              "leftValue": "={{ $json.type }}",
              "rightValue": "page",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "name": "Filter Pages Only",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [500, 200]
    },
    {
      "parameters": {
        "resource": "page",
        "operation": "get",
        "id": "={{ $json.id }}"
      },
      "name": "Get Original Page",
      "type": "bookstack",
      "typeVersion": 1,
      "position": [700, 200]
    },
    {
      "parameters": {
        "jsCode": "// Transform content for migration\nconst originalPage = $input.first().json;\n\n// Clean up HTML content\nlet cleanedHtml = originalPage.html\n  .replace(/tag:migrate/g, 'tag:migrated')\n  .replace(/<script[^>]*>.*?<\\/script>/gs, '') // Remove scripts\n  .replace(/style=\"[^\"]*\"/g, '') // Remove inline styles\n  .replace(/class=\"[^\"]*\"/g, ''); // Remove CSS classes\n\n// Update metadata\nconst migratedPage = {\n  ...originalPage,\n  name: `[MIGRATED] ${originalPage.name}`,\n  html: cleanedHtml,\n  tags: originalPage.tags.replace('migrate', 'migrated'),\n  migration_date: new Date().toISOString(),\n  original_id: originalPage.id\n};\n\nreturn [{ json: migratedPage }];"
      },
      "name": "Transform Page Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "resource": "page",
        "operation": "create",
        "book_id": "1",
        "name": "={{ $json.name }}",
        "html": "={{ $json.html }}",
        "tags": "={{ $json.tags }}"
      },
      "name": "Create Migrated Page",
      "type": "bookstack",
      "typeVersion": 1,
      "position": [1100, 200]
    },
    {
      "parameters": {
        "resource": "page",
        "operation": "update",
        "id": "={{ $json.original_id }}",
        "name": "={{ $json.name.replace('[MIGRATED] ', '') }}",
        "html": "={{ $json.html }}",
        "tags": "={{ $json.tags }},migration-complete"
      },
      "name": "Update Original Page",
      "type": "bookstack",
      "typeVersion": 1,
      "position": [1300, 200]
    },
    {
      "parameters": {
        "resource": "global",
        "operation": "search",
        "query": "tag:sync-source",
        "returnAll": true
      },
      "name": "Find Sync Sources",
      "type": "bookstack",
      "typeVersion": 1,
      "position": [300, 400]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "url": "https://external-wiki.example.com/api/pages/{{ $json.external_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "name": "Fetch External Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [500, 400]
    },
    {
      "parameters": {
        "jsCode": "// Compare and sync content\nconst externalContent = $input.first().json;\nconst bookstackPage = $('Find Sync Sources').first().json;\n\n// Check if content has changed\nconst contentChanged = externalContent.content !== bookstackPage.html;\nconst titleChanged = externalContent.title !== bookstackPage.name;\n\nif (contentChanged || titleChanged) {\n  return [{\n    json: {\n      ...bookstackPage,\n      name: externalContent.title,\n      html: externalContent.content,\n      tags: `${bookstackPage.tags},auto-synced`,\n      last_sync: new Date().toISOString(),\n      sync_status: 'updated'\n    }\n  }];\n} else {\n  return [{\n    json: {\n      ...bookstackPage,\n      sync_status: 'no_changes'\n    }\n  }];\n}"
      },
      "name": "Compare and Sync",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true
          },
          "conditions": [
            {
              "leftValue": "={{ $json.sync_status }}",
              "rightValue": "updated",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "name": "Filter Changed Content",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [900, 400]
    },
    {
      "parameters": {
        "resource": "page",
        "operation": "update",
        "id": "={{ $json.id }}",
        "name": "={{ $json.name }}",
        "html": "={{ $json.html }}",
        "tags": "={{ $json.tags }}"
      },
      "name": "Update Synced Page",
      "type": "bookstack",
      "typeVersion": 1,
      "position": [1100, 400]
    }
  ],
  "connections": {
    "Find Content to Migrate": {
      "main": [
        [
          {
            "node": "Filter Pages Only",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Pages Only": {
      "main": [
        [
          {
            "node": "Get Original Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Original Page": {
      "main": [
        [
          {
            "node": "Transform Page Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Page Content": {
      "main": [
        [
          {
            "node": "Create Migrated Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Migrated Page": {
      "main": [
        [
          {
            "node": "Update Original Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Sync Sources": {
      "main": [
        [
          {
            "node": "Fetch External Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch External Content": {
      "main": [
        [
          {
            "node": "Compare and Sync",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compare and Sync": {
      "main": [
        [
          {
            "node": "Filter Changed Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Changed Content": {
      "main": [
        [
          {
            "node": "Update Synced Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}